/* eslint-disable */
export default async () => {
    const t = {
        ["./app/dtos/app.env.dto"]: await import("./app/dtos/app.env.dto"),
        ["./modules/auth/dtos/auth.dto"]: await import("./modules/auth/dtos/auth.dto"),
        ["./modules/user/dtos/user.dto"]: await import("./modules/user/dtos/user.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./app/dtos/app.env.dto"), { "AppHttpDto": { host: { required: false, type: () => String }, port: { required: false, type: () => Number } }, "AppUrlVersionDto": { enable: { required: false, type: () => Boolean }, prefix: { required: false, type: () => String }, version: { required: false, type: () => String } }, "AppEnvDto": { env: { required: false, enum: t["./app/dtos/app.env.dto"].ENVIRONMENT }, timezone: { required: false, type: () => String }, http: { required: false, type: () => t["./app/dtos/app.env.dto"].AppHttpDto }, globalPrefix: { required: false, type: () => String }, urlVersion: { required: false, type: () => t["./app/dtos/app.env.dto"].AppUrlVersionDto } } }], [import("./modules/user/dtos/user.dto"), { "CreateUserDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String, minLength: 6 }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, bio: { required: false, type: () => String } }, "UpdateUserDto": { firstName: { required: false, type: () => String }, lastName: { required: false, type: () => String }, bio: { required: false, type: () => String }, avatar: { required: false, type: () => String } }, "ChangePasswordDto": { currentPassword: { required: true, type: () => String }, newPassword: { required: true, type: () => String, minLength: 6 } }, "UserResponseDto": { _id: { required: true, type: () => String }, email: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, bio: { required: false, type: () => String }, avatar: { required: false, type: () => String }, isActive: { required: true, type: () => Boolean }, isEmailVerified: { required: true, type: () => Boolean }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./modules/auth/dtos/auth.dto"), { "LoginDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String } }, "RegisterDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String, minLength: 6 }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String } }, "AuthResponseDto": { accessToken: { required: true, type: () => String }, expiresIn: { required: true, type: () => String }, tokenType: { required: true, type: () => String }, userId: { required: true, type: () => String }, email: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String } } }]], "controllers": [[import("./modules/auth/controllers/auth.controller"), { "AuthController": { "login": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "register": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto } } }], [import("./modules/user/controllers/user.controller"), { "UserController": { "create": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "findAll": { type: [t["./modules/user/dtos/user.dto"].UserResponseDto] }, "findOne": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "update": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "changePassword": {}, "remove": {} } }], [import("./modules/health/health.controller"), { "HealthController": { "check": { type: Object } } }]] } };
};